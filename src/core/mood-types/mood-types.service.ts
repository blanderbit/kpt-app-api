import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleDriveFilesService } from '../../common/services/google-drive-files.service';
export interface MoodType {
  id: string;
  name: string;
  description: string;
  emoji: string;
  color: string;
  score: number;
  category: 'positive' | 'neutral' | 'negative';
}

export interface MoodTypesData {
  moodTypes: MoodType[];
  categories: Record<string, string>;
  defaultMood: string;
}

@Injectable()
export class MoodTypesService {
  private readonly logger = new Logger(MoodTypesService.name);
  private moodTypesData: MoodTypesData;
  private readonly fileId: string;

  constructor(
    private readonly configService: ConfigService,
    private readonly googleDriveFilesService: GoogleDriveFilesService,
  ) {
    this.fileId = this.configService.get<string>('MOOD_TYPES_FILE_ID') || '';
    this.loadMoodTypes();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ Google Drive
   */
  async loadMoodTypes(): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Google Drive
      if (this.fileId && this.googleDriveFilesService.isAvailable()) {
        this.logger.log('Loading mood types from Google Drive');
        this.moodTypesData = await this.googleDriveFilesService.getFileContent(this.fileId);
        return;
      }

      // –ï—Å–ª–∏ Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
      this.logger.warn('Google Drive not available, using fallback mood types');
      this.moodTypesData = {
        moodTypes: [
          {
            id: 'fine',
            name: '–ù–æ—Ä–º–∞–ª—å–Ω–æ',
            description: '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
            emoji: 'üòê',
            color: '#FFEB3B',
            score: 7,
            category: 'neutral'
          }
        ],
        categories: {
          'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'
        },
        defaultMood: 'fine'
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', error);
      // Fallback –∫ –±–∞–∑–æ–≤—ã–º —Ç–∏–ø–∞–º
      this.moodTypesData = {
        moodTypes: [
          {
            id: 'fine',
            name: '–ù–æ—Ä–º–∞–ª—å–Ω–æ',
            description: '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
            emoji: 'üòê',
            color: '#FFEB3B',
            score: 7,
            category: 'neutral'
        }
        ],
        categories: {
          'neutral': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'
        },
        defaultMood: 'fine'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  getAllMoodTypes(): MoodType[] {
    return this.moodTypesData.moodTypes;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ ID
   */
  getMoodTypeById(id: string): MoodType | undefined {
    return this.moodTypesData.moodTypes.find(type => type.id === id);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  getAllCategories(): Record<string, string> {
    return this.moodTypesData.categories;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getMoodTypesByCategory(category: string): MoodType[] {
    return this.moodTypesData.moodTypes.filter(type => type.category === category);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  getDefaultMoodType(): MoodType | undefined {
    return this.getMoodTypeById(this.moodTypesData.defaultMood);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  getMoodTypesStats(): {
    totalTypes: number;
    totalCategories: number;
    typesByCategory: Record<string, number>;
    averageScore: number;
  } {
    const totalTypes = this.moodTypesData.moodTypes.length;
    const totalCategories = Object.keys(this.moodTypesData.categories).length;
    
    const typesByCategory: Record<string, number> = {};
    let totalScore = 0;
    
    this.moodTypesData.moodTypes.forEach(type => {
      typesByCategory[type.category] = (typesByCategory[type.category] || 0) + 1;
      totalScore += type.score;
    });

    const averageScore = totalScore / totalTypes;

    return {
      totalTypes,
      totalCategories,
      typesByCategory,
      averageScore: Math.round(averageScore * 100) / 100,
    };
  }

  /**
   * –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
   */
  searchMoodTypes(query: string): MoodType[] {
    const searchQuery = query.toLowerCase();
    
    return this.moodTypesData.moodTypes.filter(type => 
      type.name.toLowerCase().includes(searchQuery) ||
      type.description.toLowerCase().includes(searchQuery) ||
      type.category.toLowerCase().includes(searchQuery)
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
   */
  getRecommendedMoodTypes(description: string, limit: number = 3): MoodType[] {
    const desc = description.toLowerCase();
    const scoredTypes = this.moodTypesData.moodTypes.map(type => {
      let score = 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
      if (desc.includes(type.name.toLowerCase())) {
        score += 2;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞
      if (desc.includes(type.description.toLowerCase())) {
        score += 1;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (desc.includes(type.category.toLowerCase())) {
        score += 0.5;
      }

      return { type, score };
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—á–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return scoredTypes
      .filter(item => item.score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, limit)
      .map(item => item.type);
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å ID —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  isValidMoodTypeId(id: string): boolean {
    return this.moodTypesData.moodTypes.some(type => type.id === id);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
   */
  getHighRatedMoodTypes(threshold: number = 7): MoodType[] {
    return this.moodTypesData.moodTypes.filter(type => type.score >= threshold);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
   */
  getLowRatedMoodTypes(threshold: number = 4): MoodType[] {
    return this.moodTypesData.moodTypes.filter(type => type.score <= threshold);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ Google Drive
   */
  async updateMoodTypes(newData: MoodTypesData): Promise<void> {
    if (!this.fileId || !this.googleDriveFilesService.isAvailable()) {
      throw new Error('Google Drive not available for updating mood types');
    }

    try {
      await this.googleDriveFilesService.updateFileContent(this.fileId, newData);
      this.moodTypesData = newData;
      this.logger.log('Mood types updated successfully in Google Drive');
    } catch (error) {
      this.logger.error('Failed to update mood types in Google Drive', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  async reloadMoodTypes(): Promise<void> {
    await this.loadMoodTypes();
  }
}
